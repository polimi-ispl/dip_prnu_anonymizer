from torch import nn
from collections import OrderedDict


class DnCNN(nn.Module):
    """
    Denoising CNN
    @Author: Nicol√≤ Bonettini, Luca Bondi
    """

    def __init__(self):
        super(DnCNN, self).__init__()

        net = OrderedDict()
        net['conv1'] = nn.Conv2d(in_channels=1, out_channels=64, kernel_size=(3, 3), padding=1)
        net['relu1'] = nn.ReLU()
        for i in range(2, 17):
            net['conv{}'.format(i)] = nn.Conv2d(in_channels=64, out_channels=64, kernel_size=(3, 3),
                                                padding=1, bias=False)
            net['bn{}'.format(i)] = nn.BatchNorm2d(num_features=64, momentum=0.99, eps=0.001)
            net['relu{}'.format(i)] = nn.ReLU()
        net['conv17'] = nn.Conv2d(in_channels=64, out_channels=1, kernel_size=(3, 3), padding=1)

        for layer in net.keys():
            self.add_module(layer, net[layer])

    def forward(self, input):
        x = input
        for module in self._modules.values():
            x = module(x)
        noise = x
        return noise
